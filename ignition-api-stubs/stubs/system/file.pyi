from typing import Any, List, Optional

from dev.coatl.helper.types import AnyStr

def fileExists(filepath: AnyStr) -> bool: ...
def getTempFile(extension: AnyStr) -> AnyStr: ...
def openFile(
    extension: Optional[AnyStr] = ..., defaultLocation: Optional[AnyStr] = ...
) -> Optional[AnyStr]: ...
def openFiles(
    extension: Optional[AnyStr] = ..., defaultLocation: Optional[AnyStr] = ...
) -> Optional[List[AnyStr]]: ...
def readFileAsBytes(filepath: AnyStr) -> Any: ...
def readFileAsString(filepath: AnyStr, encoding: Optional[AnyStr] = ...) -> AnyStr: ...
def saveFile(
    filename: AnyStr,
    extension: Optional[AnyStr] = ...,
    typeDesc: Optional[AnyStr] = ...,
) -> Optional[AnyStr]: ...
def writeFile(
    filepath: AnyStr, data: Any, append: bool = ..., encoding: AnyStr = ...
) -> None: ...
